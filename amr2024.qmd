---
title: "Annual Mobility Report 2024"
format: 
  html:
      toc: true
      toc_float: true
      toc-title: Contents
      toc_location: left
editor: visual
number-sections: true
execute: 
  echo: false
  warning: false
  message: false
  fig.with: 9
---

```{r package}
library(tidyverse)
library(ggplot2)
library(plotly)
library(dplyr)
library(knitr)
library(DT)
library(highcharter)
library(leaflet)
library(sf)
library(RColorBrewer)
library(scales)
library(htmlwidgets)
library(data.table)
```

Understanding the trends and conditions occurring in the North Florida will allow planners and engineers to prioritize resources more effectively as part of the North Florida Transportation Planning Organization’s (TPO) Congestion Management Process. The data presented are an essential part of making evidence-based decisions for the investment in mobility in North Florida. The data presented focuses on Clay, Duval, Nassau and St. Johns counties for the years 2018-2022 and 2019-2023 when available.

# People

## Population

North Florida’s population grew by 10.2%, or 173,000 persons, between 2019 and 2023. This growth outpaced the growth statewide (6.3%). Growth in population places a higher demand for mobility. North Florida’s strong growth outpacing population gains statewide is anticipated to continue through 2024.

The population grew by 0.5% nationally from 2022 to 2023. North Florida grew by 2.7% outpacing the nation and Florida at 1.58%.

There is no benchmark for population growth. Increases impact the demand for mobility.

```{r}

# Filter data for PedFatal > 0
df_pop <- read.csv("~/GitHub/amr_2024/data/population.csv")

# Define your custom colors
custom_colors <- c("#DEF9C4","#D6EFD8","#80AF81","#508D4E","#1A5319")

# Create a Highchart object with data labels and stack totals
hchart(df_pop, "column", hcaes(x = county, y = population, group = year)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    #stacking = "normal",
    dataLabels = list(
      enabled = TRUE,

      #     formatter = JS("function() {
      # return Highcharts.numberFormat(this.y / 1e3, 1) + ' K';}")

      formatter = JS("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        return num.toFixed(0) + unit;
      }")

    ) # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Population"),
    min = 0,
    labels = list(
      formatter = JS("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.value) / Math.log(1000));
        var unit = units[order];
        var num = this.value / Math.pow(1000, order);
        if (order >= 2){
          return num.toFixed(2) + unit;
        }
        else if (this.value == 0){
          return this.value;
        }
        else{
          return num.toFixed(0) + unit;
        }

      }")
    )

  ) %>%
  hc_title(text = "Populations by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="http://www.edr.state.fl.us/Content/population-demographics/data/index-floridaproducts.cfm" target="_blank"><b>Office of Economic and Demographic Research</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Licensed Drivers

There are 111,100 (or 8.5%) more drivers in North Florida in 2023 than 2019. About 77% of the population in the region is a licensed driver.

There is no benchmark for licensed drivers. Increases impact the demand for mobility.

```{r}
# Load data
df_drivers <- read.csv("~/GitHub/amr_2024/data/drivers.csv")
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")
# Create a Highchart object with data labels and stack totals
hchart(df_drivers, "column", hcaes(x = year, y = drivers, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,

      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        return num.toFixed(0) + unit;
      }"))

      #     formatter = JS("function() {
      # return Highcharts.numberFormat(this.y / 1e3, 1) + ' aaa';}")

    ) # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals

      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return num.toFixed(0) + unit;
        }
      }"))

      #   formatter = JS(paste0("function() {
      #   return Highcharts.numberFormat(this.total / 1e3, 1) + ' ddd';
      # }"))

    ),
    title = list(text = "Licensed Drivers"),
    min = 0,

    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )

  ) %>%
  hc_title(text = "Licensed Drivers by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/pdf/driver-vehiclereports/2023annuallicenseddriverreport.pdf" target="_blank"><b>Florida Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Underserved Populations

Transportation barriers are the third leading cause of missing a medical appointment for older adults across the country. Medically Underserved Areas/Populations are areas or populations designated by the U.S. Department of Health Resources and Services Administration as having too few primary care providers, high infant mortality, high poverty or a high elderly population. Nearly 370,000 persons in North Florida live in medically underserved areas. There are no benchmarks for population in underserved areas. It is desirable to ensure the population is adequately served.

Accessing affordable and nutritious food was a challenge for nearly 800,000 persons in North Florida in 2015 (the latest date statistics are available). The US Economic Research Service of the Department of Agriculture identifies populations whose food security is at risk if they live in low-income areas and do not have a grocery store within 1 mile in an urban area and 10 miles in a rural area. There are no benchmarks for population living with food uncertainty. It is desirable to ensure the population is adequately served.

The following map highlights areas designated as medically underserved in 2019 and areas without reliable access to healthy foods in 2015 (the latest date statistics are available).

Source: [HRSA Map Tool](https://data.hrsa.gov/maps/map-tool/?tl=MUA&gt=State&cd=12&dp=ALL){target="_blank"}

```{r}
# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/underserved.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color
pal <- colorFactor(palette = c("red", "orange", "gray"), 
                   domain = c("No Data", "Medically Underserved Areas", "Food Deserts"))

labs <- as.list(geojson_data$Metric)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolygons(data = geojson_data, color = ~pal(Metric), popup = ~paste(Metric), opacity = 0.8, label = labs)%>%
  addLegend("topright", 
            colors = pal(unique(geojson_data$Metric)), 
            labels = unique(geojson_data$Metric),
            opacity = 1.0,
            title = "Metric") %>% 
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )
```

# Economy

## Gross Domestic Product
The Gross Domestic Product (GDP) in North Florida continues to show strong growth. GDP is a leading indicator of the amount of travel expected within the region. 

There are no benchmarks for gross domestic product. 

Increases are preferred and annual monitoring is conducted.


```{r}
df_gdp <- read.csv("~/GitHub/amr_2024/data/GDP.csv")
# Create a Highchart object with data labels and stack totals
hchart(df_gdp, "column", hcaes(x = Year, y = Total, group = County)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 2) {
          return '$' + num.toFixed(2) + unit;
        }
        return '$' + num.toFixed(0) + unit;
      }"))

    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return '$' + num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return '$' + num.toFixed(0) + unit;
        }
      }"))
    ),
    title = list(text = "GDP"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return '$' + num.toFixed(0) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return '$' + num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Gross Domestic Product by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://apps.bea.gov/itable/?ReqID=70&step=1#eyJhcHBpZCI6NzAsInN0ZXBzIjpbMSwyOSwyNSwzMSwyNiwyNywzMF0sImRhdGEiOltbIlRhYmxlSWQiLCI1MzMiXSxbIk1ham9yX0FyZWEiLCI0Il0sWyJTdGF0ZSIsWyIxMjAwMCJdXSxbIkFyZWEiLFsiMTIwMTkiLCIxMjAzMSIsIjEyMDg5IiwiMTIxMDkiXV0sWyJTdGF0aXN0aWMiLFsiLTEiXV0sWyJVbml0X29mX21lYXN1cmUiLCJMZXZlbHMiXSxbIlllYXIiLFsiLTEiXV0sWyJZZWFyQmVnaW4iLCItMSJdLFsiWWVhcl9FbmQiLCItMSJdXX0=" target="_blank"><b>Bureau of Economic Analysis</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button

```

## Employment

Unemployment rates are near all time lows and are strong indicators of a healthy economy and continued growth in travel demand.

```{r}

# Data
# Load data
df_emp <- read.csv("~/GitHub/amr_2024/data/employment.csv")

# Create highchart
highchart() %>%
  hc_title(text = "Employment (Jobs) and Unemployment Rate (%) by Month", align = 'left', style = list(fontFamily = 'Roboto Condensed', color = '#333333', fill = '#333333', fontSize = '18px', fontWeight = 'bold')) %>%
  hc_subtitle(text = 'Source: <a href="https://data.bls.gov/timeseries/LAUMT122726000000006?amp%253bdata_tool=XGtable&output_view=data&include_graphs=true" target="_blank"><b>Bureau of Labor Statistics</b></a>', align = 'left', style = list(fontFamily = 'Roboto Condensed')) %>%
  hc_xAxis(categories = df_emp$Date, crosshair = TRUE) %>%
  hc_yAxis_multiples(
    list(title = list(text = "Employment"), opposite = FALSE,     
         labels = list(
           formatter = JS("function() {
            var units = ['', 'K', 'M', 'B'];
            var order = Math.floor(Math.log(this.value) / Math.log(1000));
            var unit = units[order];
            var num = this.value / Math.pow(1000, order);
            if (order >= 2){
              return num.toFixed(2) + unit;
            }
            else if (this.value == 0){
              return this.value;
            }
            else{
              return num.toFixed(0) + unit;
            }
      
          }")
         )),
    list(title = list(text = "Unemployment Rate"), opposite = TRUE, 
         labels = list(
         formatter = JS("function() {
            return this.value + '%';
         }"))
     )
  ) %>%
  hc_add_series(name = "Employment", type = "column", data = df_emp$Employment) %>%
  hc_add_series(name = "Unemployment Rate", type = "spline", data = df_emp$Unemployment.Rate, yAxis = 1) %>%
  hc_tooltip(shared = TRUE) %>%
  hc_legend(align = 'left', verticalAlign = 'top', backgroundColor = 'rgba(255,255,255,0.25)') %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Tourism

The Moving Ahead for Progress in the 21st Century Act ("MAP-21") transportation legislation included tourism as one of the metropolitan planning factors.

Tourism plays a major role in the state of Florida. According to the North Florida TPO’s Tourism Mobility Study published in 2022, nearly 26 million visitors traveled to the region in 2022. Attractions include (but are not limited to) the St. Johns River, Jacksonville Beach, Neptune Beach, Atlantic Beach, and Black Rock Beach. Other destinations include wildlife sightseeing, camping, golfing and hiking/biking trails. The City of Jacksonville has more than 80,000 acres of parks. Sporting events are frequented in the area as the region is home to several minor league sports teams and home of the Jacksonville Jaguars of the National Football League. There are many annual events that occur in the North Florida TPO region which include (but are not limited to) the World Of Nations Celebration, the Gate River Run (USA 15K Championship Race), The Players Championship, the Jacksonville Jazz Festival, The Kingfish Tournament, and the Florida/Georgia college football game.  

The goal is to increase the number of multi-modal projects in high tourism areas and provide transportation connectivity to tourists within the region. A summary of the visitors per year in each county is provided in Table 13.  

Including visitors from within the region, St. Augustine hosts nearly 6 million visitors each year.


```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    editable = TRUE,
    scroller = TRUE,
    lengthChange = TRUE,
    paginate = FALSE
    ,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_lottr <- read.csv("~/GitHub/amr_2024/data/tourism.csv", check.names=FALSE, row.names=1) 

datatable(          
  caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://www.floridashistoriccoast.com/about/industry-resources/tourism-facts-figures/economic-impact-reports/" target="_blank"><b>St. Augustine Ponte Vedra</b></a> (<a href="https://s3.us-east-1.amazonaws.com/st-augustine-2019/images/SAPVB-doc-images/Floridas-Historic-Coast-July-2021-June-2022-Economic-Impact-Report-LOS-Detail.pdf?v=1669640377"  target="_blank">PDF Link</a>) and <b><a href="https://www.visitjacksonville.com/about/research-information/" target="_blank">Visit Jacksonville</b></a>')),
df_lottr,options = c(table_options(), list(pageLength = 4)))

```

# Safe and Secure Travel

Crash data was compiled from several sources including the Florida Department of Transportation (FDOT) Safety Office, Signal Four Analytics, and FDOT State Safety Office's historical Crash Analysis Reporting (CAR) database. According to Florida Highway Safety and Motor Vehicles, there were a total of 31,542 crashes that occurred over the four North Florida TPO counties in 2023. Duval County accounted for a majority of these crashes due to the county population and extent of roadways present.

## Total Crashes

Total crashes in 2023 decreased 1.3% over 2022.

The target is to have zero injuries or fatalities resulting from crashes.

```{r}
df_tot_crash <- read.csv("~/GitHub/amr_2024/data/total_crashes.csv")

# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_tot_crash, "column", hcaes(x = year, y = crashes, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e3, 1) + ' K';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return num.toFixed(1) + unit;
        }
      }"))
      
      
    #   formatter = JS(paste0("function() {
    #   return Highcharts.numberFormat(this.total / 1e3, 1) + ' K';
    # }"))
    
    
    ),
    title = list(text = "Number of Crashes"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Total Crashes by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Fatal and Serious Injury Crash Map

This map shows the location of fatal crashes and serious injury crashes in 2023.

Source: [Signal Four Analytics](https://signal4analytics.com/){target="_blank"}

```{r, message=FALSE}

df_fatalserious <- read.csv("~/GitHub/amr_2024/data/fatalseriouscrashes.csv")

point_data <- data.frame(
  name = df_fatalserious$S4_CRASH_SEVERITY,
  lat = df_fatalserious$LATITUDE,
  lon = df_fatalserious$LONGITUDE
)

# Continuous palette
ord <- factor(df_fatalserious$S4_CRASH_SEVERITY, levels = c('Fatality', 'Serious Injury'))
pal <- colorFactor(palette = c('darkorange',"red"), levels = ord, ordered = TRUE)
labs <- paste("<b>Severity:</b> ", df_fatalserious$S4_CRASH_SEVERITY)

# Create the Leaflet map
leaflet(data = df_fatalserious) %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  addCircleMarkers(~LONGITUDE, ~LATITUDE, # Use the Longitude and Latitude columns
                   popup = ~paste0("<b>Crash Severity: </b>", S4_CRASH_SEVERITY), 
                   radius=5,label = lapply(labs, htmltools::HTML), color = ~pal(S4_CRASH_SEVERITY), weight = 1, 
                   fillOpacity = 0.8) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9) %>% 
  addEasyButton(
    easyButton(
      icon = "fa-map-marker",
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )%>%
  addLegend(df_fatalserious,
            position = "bottomright",
            pal = pal, values = ord,
            title = "Severity",
            opacity = 1) 

```

## Fatalities

The number of fatalities is a crucial benchmark of progress when assessing the target zero initiative. According to the Florida Highway Safety and Motor Vehicles dashboard, there were 238 fatalities within the region during 2023.  

```{r}
df_tot_fat <- read.csv("~/GitHub/amr_2024/data/total_fatalities.csv")

# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_tot_fat, "column", hcaes(x = year, y = crashes, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals, 
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return num.toFixed(0) + unit;
        }
      }")),
      # style = list(fontWeight = 'bold', color = 'gray'),
      
      labels = list(
        formatter = JS("function() {
          var units = ['', 'K', 'M', 'B'];
          var order = Math.floor(Math.log(this.value) / Math.log(1000));
          var unit = units[order];
          var num = this.value / Math.pow(1000, order);
          if (order >= 2){
            return num.toFixed(2) + unit;
          }
          else if (this.value == 0){
            return this.value;
          }
          else{
            return num.toFixed(0) + unit;
          }
    
        }"
        )
      )
    ),
    title = list(text = "Number of Fatalities"),
    min = 0
    ) %>%
  hc_title(text = "Total Fatalities by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Injury Crashes

The Florida Highway Safety and Motor Vehicle dashboard lists the total number of injuries as 13,440 within the region during 2023.  

```{r}
df_tot_inj <- read.csv("~/GitHub/amr_2024/data/total_injuries.csv")

# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_tot_inj, "column", hcaes(x = year, y = crashes, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,

      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.y;
        }
        else {
          return num.toFixed(1) + unit;
        }
      }"))
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals, 
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return num.toFixed(1) + unit;
        }
      }"))
    ),
    title = list(text = "Number of Injuries"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }
    }")
    )
    ) %>%
  hc_title(text = "Total Injuries by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Crash Rates

The rate of crashes is the ratio of the total number of crashes to the number of vehicle miles traveled (VMT) expressed in 100 million VMT. Since VMT data is not available for 2023, the 2022 rates were analyzed. In 2022, the rate of fatalities was 1.56, the rate of injuries was 110.7, and the rate of all crashes was 174.6. In each case, the rate has gone down since 2021 but is higher than the rate in 2020.

```{r}

# Filter data for PedFatal > 0
df_crash_rates <- read.csv("~/GitHub/amr_2024/data/crash_rates.csv")

# Define your custom colors
custom_colors <- c("#DEF9C4","#D6EFD8","#80AF81","#508D4E","#1A5319")

# Create a Highchart object with data labels and stack totals
hchart(df_crash_rates, "column", hcaes(x = Severity, y = Rate, group = Year)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    #stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1, 1) ;}")
    ) # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Rate (Per 100 MVM of Travel)"),
    min = 0
  ) %>%
  hc_title(text = "Florida Crash Rates by Severity and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/pdf/crashreports/crash_facts_2022.pdf" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a> <br>Rate is determined per 100 million vehicle miles of travel annually.') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Pedestrian and Bicyclist Fatalities

According to the Florida Highway Safety and Motor Vehicles dashboard, the number of non-motorized fatalities for the region was 72 in 2023. 62 fatalities were pedestrians and 10 were cyclists.

The pedestrian fatalities have been climbing over the past five years but the bicycle fatalities have been decreasing since 2020 and are also less than in 2019.

::: {layout="[ [1,1] ]"}
```{r}
df_bike_ped <- read.csv("~/GitHub/amr_2024/data/NF_Bike_Ped_fatalcrashes_19_23.csv")

# Calculate year totals
df_totals <- df_bike_ped %>%
  group_by(Year) %>%
  summarise(Total_PedFatal = mean(PedTotals),Total_BikeFatal = mean(BikeTotals),
            Ped_PC = mean(Ped_PC),Bike_PC = mean(Bike_PC))

# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Filter data for PedFatal > 0
df_filtered <- df_bike_ped[df_bike_ped$PedFatal > 0, ]

# Create a Highchart object with data labels and stack totals
hchart(df_filtered, "column", hcaes(x = Year, y = PedFatal, group = County)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(enabled = TRUE, format = '{point.y}') # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Pedestrian Fatalities"),
    min = 0
  ) %>%
  hc_title(text = "Pedestrian Fatalities by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

```{r}

# Filter data for PedFatal > 0
df_filtered <- df_bike_ped[df_bike_ped$BikeFatal > 0, ]

# Create a Highchart object with data labels and stack totals
hchart(df_filtered, "column", hcaes(x = Year, y = BikeFatal, group = County)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(enabled = TRUE, format = '{point.y}') # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Bicyclist Fatalities"),
    min = 0,
    max = 80
  ) %>%
  hc_title(text = "Bicyclist Fatalities by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```
:::

## Impaired Driving

Impaired driving was a contributing cause in about 53% of all crash fatalities in 2023, which is just over half of all crashes.

Additionally,

+ 8.5% of crashes involving drivers who were tested for alcohol only result in fatalities
+ 72.5% of crashes involving drugs only result in fatalities
+ 91.3% of crashes involving drugs and alcohol result in fatalities

The goal is to have zero injuries or fatalities resulting from crashes.

```{r}
df_tot_imp <- read.csv("~/GitHub/amr_2024/data/total_impaired.csv")

# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_tot_imp, "column", hcaes(x = year, y = crashes, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE#, # Enable stack totals
      # style = list(fontWeight = 'bold', color = 'gray'
      # ),
    ), 
    title = list(text = "Numbre of Impaired Driving Crashes"),
    min = 0
    ) %>%
  hc_title(text = "Total Impaired Driving Crashes by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flhsmv.gov/traffic-crash-reports/crash-dashboard/" target="_blank"><b>Florida Department of Highway Safety and Motor Vehicles</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

# Quantity of Travel

## Vehicle Miles Traveled

Vehicle-miles traveled considers the Annual Average Daily Traffic (AADT) and the roadway segment length. There is not a set benchmark or goal for vehicle miles traveled. Reducing this number can help with congestion issues along the roadway network. 32.2 million vehicle miles traveled was estimated for 2022.

::: {layout="[ [1,1] ]"}

```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

df_vmt <- read.csv("~/GitHub/amr_2024/data/vmt.csv")

# Create a Highchart object with data labels and stack totals
hchart(df_vmt, "column", hcaes(x = Year, y = TotalSHSVMT, group = County)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Vehicle Miles Traveled"),
    min = 0
  ) %>%
  hc_title(text = "State Highway System Vehicle Miles Traveled by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://fdotsourcebook.com/performance-measures/auto/vehicle-miles-traveled#" target="_blank"><b>FDOT Sourcebook Vehicle Miles Traveled</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_vmt, "column", hcaes(x = Year, y = TotalNHSVMT, group = County)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Vehicle Miles Traveled"),
    min = 0,
    max = 40000000
  ) %>%
  hc_title(text = "National Highway System Vehicle Miles Traveled by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://fdotsourcebook.com/performance-measures/auto/vehicle-miles-traveled#" target="_blank"><b>FDOT Sourcebook Vehicle Miles Traveled</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button

```
:::

## Transit Ridership

Transit ridership has declined in the wake of the COVID-19 pandemic. The JTA keeps track of these metrics and levels continue to remain stagnant over the past few years. Services that are included within JTA’s scope consist of the St. Johns River Ferry, ReadiRide (on-call transportation service), Clay Flex, St. Johns Express, Clay Express, and Nassau Express. The 2022 ridership data related to these services are shown in table below. On-time performance was only tracked for the St. Johns River Ferry during 2022 and this came in at 98%. 
 

```{r}
df_transit <- read.csv("~/GitHub/amr_2024/data/transit_ridership.csv")

df_transit$Agency <- factor(df_transit$Agency, levels = rev(sort(unique(df_transit$Agency))))
colors <- c("#C8ACD6","#694F8E")

# Create a Highchart object with data labels and stack totals
hchart(df_transit, "column", hcaes(x = Year, y = Totals, group = Agency)) %>%
  hc_colors(colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Ridership Count"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(1) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Transit Ridership by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://fdotsourcebook.com/performance-measures/transit/passenger-trips#" target="_blank"><b>FDOT Sourcebook Transit Ridership</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Sea Travel and Freight

No cruise ships called on JAXPORT in 2021 due to the COVID-19 pandemic. Carnival Cruise Lines returned to service and made its first vessel call in March 2022. The services peaked in 2016 at 390 thousand passengers. In 2023, cruise passenger levels seems to have returned to pre-pandemic levels.

There is no defined benchmark for this measure. Increases are preferred and annual monitoring is conducted.

JAXPORT's terminals shipped more tons of cargo in fiscal year 2023 than 2022. The Port of Fernandina shipping is slightly less in 2023. Overall shipping tonnage has remained steady over the last 3 years.

There is no defined benchmark for this measure. Increases are preferred and annual monitoring is conducted.

::: {layout="[ [1,1] ]"}

### Cruise Passengers

```{r}
df_cruise <- read.csv("~/GitHub/amr_2024/data/cruise_passengers.csv")

custom_colors <- c("#3ABEF9")

# Create a Highchart object with data labels and stack totals
hchart(df_cruise, "column", hcaes(x = year, y = passengers)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e3, 1) + 'K';}")
    ))) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = FALSE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')),
    title = list(text = "Cruise Passengers"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Cruise Passengers by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.jaxport.com/media/statistics/" target="_blank"><b>Jacksonville Port Authority</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

### Tons Shipped

```{r}
df_ton_ship <- read.csv("~/GitHub/amr_2024/data/tons_shipped.csv")

df_ton_ship$port <- factor(df_ton_ship$port, levels = rev(sort(unique(df_ton_ship$port))))
colors <- c("#C8ACD6","#694F8E")

# Create a Highchart object with data labels and stack totals
hchart(df_ton_ship, "column", hcaes(x = year, y = tons, group = port)) %>%
  hc_colors(colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + ' Mil';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Tons Shipped"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(1) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Tonnage Shipped by Port and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.jaxport.com/media/statistics/" target="_blank"><b>Jacksonville Port Authority</b></a> and <a href="https://www.portoffernandina.org/_files/ugd/e5fb15_182f6f5831d34269a9dedf674412ea63.pdf" target="_blank"><b>Ocean Highway and Port Authority</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```
:::

### Automobiles and Containers Shipped

JAXPORT is maintaining its position as the container port in Florida and one of the top 10 in the nation. JAXPORT is working to provide an alternative to other constrained ports for container shipments and expand its market share in breakbulk cargo through harbor deepening, berth enhancements and new handling equipment investments.  
Container shipments at the Port of Fernandina peaked in 2021 but have risen slightly in 2023 compared to 2022. Automobile shipments in 2023 were at their lowest in the last 5 year period.  

There is no defined benchmark for this measure. Increases are preferred and annual monitoring is conducted.  

```{r}
# Load data
df_item_ship <- read.csv("~/GitHub/amr_2024/data/autos_containers_shipped.csv")

# Define your custom colors
custom_colors <- c("#DEF9C4","#D6EFD8","#80AF81","#508D4E","#1A5319")

# Create a Highchart object with data labels and stack totals
hchart(df_item_ship, "column", hcaes(x = item, y = count, group = year)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    #stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      

      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.y) / Math.log(1000));
      var unit = units[order];
      var num = this.y / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.y == 0){
        return this.y;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
      
      
          
  #     formatter = JS("function() {
  # return Highcharts.numberFormat(this.y / 1e6, 1) + ' Mil' ;}")
  # 
  
    ) # Enable data labels
  )) %>%
  hc_yAxis(
    title = list(text = "Items Shipped"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Containers and Automobiles Shipped by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.jaxport.com/media/statistics/" target="_blank"><b>Jacksonville Port Authority</b></a>') %>%
  hc_xAxis(title = list(text = "Item")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Air Travel and Freight

### Air Passengers

In 2021 passengers traveling at Jacksonville International Airport increase by 27% when compared to 2020 as the recovery from the COVID-19 pandemic began.  Monthly passengers have returned to pre-pandemic levels. 

There is no defined benchmark for aviation passengers served. Increases are preferred and annual monitoring is conducted.

Fiscal years begin October 1 and end September 30 of each year.

```{r}

# Filter data for PedFatal > 0
df_air_pass <- read.csv("~/GitHub/amr_2024/data/air_passengers.csv")

# Define your custom colors
colors <- c("#C8ACD6","#694F8E")

# Create a Highchart object with data labels and stack totals
hchart(df_air_pass, "column", hcaes(x = Month, y = Count, group = Type)) %>%
  hc_colors(colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = FALSE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1, 1) ;}")
    ) # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = FALSE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Passengers"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Air Passengers by Month and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.flyjacksonville.com/PDFs/enplanements.pdf" target="_blank"><b>Jacksonville Aviation Authority</b></a>') %>%
  hc_xAxis(title = list(text = "Month")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```


### Air Cargo

Air cargo shipments grew about 7% in 2021 compared to 2020 but fell about 3% in 2022 compared to 2021.

There is no defined benchmark for this measure. Increases are preferred and annual monitoring is conducted.  

```{r}
df_cargo <- read.csv("~/GitHub/amr_2024/data/air_cargo.csv")

custom_colors <- c("#3ABEF9")

# Create a Highchart object with data labels and stack totals
hchart(df_cargo, "column", hcaes(x = year, y = weight)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    ))) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = FALSE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')),
    title = list(text = "Air Cargo Weight (Pounds)"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(0) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Air Cargo Weight (lbs) by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.faa.gov/sites/faa.gov/files/2023-08/CY2022-All-Cargo-airports.pdf" target="_blank"><b>Federal Aviation Administration</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

# Quality of Travel

## Travel Time Reliability

Level of Travel Time Reliability (LOTTR) is defined as the ratio of the longer travel times (80th percentile) to a “normal” travel time (50th percentile). LOTTR assesses the consistency, or dependability, of travel times from day to day or across different times of the day. For a 10-minute trip with a level of travel time reliability of 2.5 you have an 80% chance of arriving within 25-minutes. The larger the level of travel time reliability the more variable the travel times are along each corridor.

The goal is for 95% of the vehicle-miles traveled within a corridor or system be reliable (level of travel time reliability of 1.50 or less) along a corridor of on Strategic Intermodal System facilities in North Florida. 

The map shows the critical Level of Travel Time Reliability of the four time periods (AM Peak, Mid Day, PM Peak, and Weekends) in 2023.

Source: [Level of Travel Time Reliability (LOTTR)](https://npmrds.ritis.org/){target="_blank"}

::: {.panel-tabset .nav-pills}
### LOTTR Map

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/Florida_TMC_LOTTR23.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color generating function
generateColor <- function(value) {
  ifelse(value < 1.15, 'darkgreen',
         ifelse(value < 1.3, 'lightgreen',
                ifelse(value < 1.4, 'yellow',
                       ifelse(value < 1.6, 'orange',
                              ifelse(value < 2, 'red', 'black')))))
}

# Apply the custom color function to your data
geojson_data$colors <- sapply(geojson_data$lottr, generateColor)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~colors,popup = ~paste(lottr), opacity = 0.8)%>%
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  ) %>%
  addLegend(
    position = "bottomright",
    colors = c('darkgreen', 'lightgreen', 'yellow', 'orange', 'red', 'black'),
    labels = c('< 1.1', '1.1 - 1.2', '1.2 - 1.3', '1.3 - 1.6', '1.6 - 2', '> 2'),
    title = "Level of Travel<br>Time Reliability<br>(Max)"
  )
```

### TTR Segment Table

The travel time reliability data in this table stems from historic data from vehicle probes, permanent and temporary count sites, HERE travel time data and FDOT’s roadway characteristics inventory. The top corridors within the region were analyzed which include I-10, I-95, I-295, SR-10, SR-13, SR-21, SR-200, US-1, US-17, and US-90.  

The 2022 LOTTR data is reported for the months of October, November and December, and takes the maximum value calculated throughout the period. The 2019 – 2021 LOTTR data was taken from the TPOs 2023 Annual Mobility Report. 

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    editable = TRUE,
    scroller = TRUE,
    lengthChange = FALSE, 
    paginate = FALSE
    ,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_lottr <- read.csv("~/GitHub/amr_2024/data/LOTTR.csv", check.names=FALSE, row.names=1) 
datatable(df_lottr,caption = htmltools::tags$caption(
            style = 'caption-side: top; text-align: left;',
            htmltools::HTML('Source: <a href="https://fdotsourcebook.com" target="_blank"><b>FDOT Sourcebook</b></a>')),options = c(table_options(), list(pageLength = 11)))

```
:::

## Truck Travel Time Reliability

This index is the ratio of the 95th-percentile travel time and the median travel time. The larger the Truck Travel Time Reliability index, the more variable the travel times are along each corridor. For a trip lasting 10 minutes with a truck travel time reliability of 1.2 you have a 95% chance of arriving within 12 minutes. 

The truck travel time reliability index should maintain or decline each year. 

Source: [Truck Travel Time Reliability (TTTR)](https://npmrds.ritis.org/){target="_blank"}

::: {.panel-tabset .nav-pills}
### Truck TTR Map

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/Florida_TMC_TTTR23.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color generating function
generateColor <- function(value) {
  ifelse(value < 1.15, 'darkgreen',
         ifelse(value < 1.3, 'lightgreen',
                ifelse(value < 1.4, 'yellow',
                       ifelse(value < 1.6, 'orange',
                              ifelse(value < 2, 'red', 'black')))))
}

# Apply the custom color function to your data
geojson_data$colors <- sapply(geojson_data$tttr, generateColor)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~colors,popup = ~paste(tttr), opacity = 0.8)%>%
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  ) %>%
  addLegend(
    position = "bottomright",
    colors = c('darkgreen', 'lightgreen', 'yellow', 'orange', 'red', 'black'),
    labels = c('< 1.1', '1.1 - 1.2', '1.2 - 1.3', '1.3 - 1.6', '1.6 - 2', '> 2'),
    title = "Truck Travel<br>Time Reliability<br>(Max)"
  )
```

### Truck TTR Segment Table

Travel time reliability was obtained from the NPMRDS, AADT from Highway Performance Monitoring System (HPMS), and occupancy factors provided by the FHWA. The goal is to maintain a TTTR ratio of under 2.0. For the North Florida TPO, the observed TTTR was 1.49 in 2022. This table shows the TTTR on major freight corridors within the TPO boundary.

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = TRUE,
    scroller = TRUE,
    lengthChange = TRUE,
    paginate=TRUE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
      )
}
df_tttr <- read.csv("~/GitHub/amr_2024/data/TTTR.csv", check.names=FALSE, row.names=1) 
datatable(df_tttr,caption = htmltools::tags$caption(
            style = 'caption-side: top; text-align: left;',
            htmltools::HTML('Source: <a href="https://npmrds.ritis.org/analytics/" target="_blank"><b>NPMRDS RITIS Data</b></a>')),options = c(table_options(), list(pageLength = 7)))
```
:::

## Level of Service

Level of Service (LOS) is a rating system of A to F with A being the best – low volume of free-flowing traffic with no delays – and F being the worst – low speeds, volume exceeds capacity with stop-and-go traffic. The FDOT District 2 Level of Service Report was reviewed. The LOS can be evaluated for daily, peak hour or peak period. The number of rural miles meeting generally acceptable operating conditions over the total number of rural road miles can be used to calculate the percent of miles meeting LOS criteria. Standards for LOS on state highways are in the [FDOT Multimodal Quality/Level of Service Handbook](https://www.fdot.gov/planning/systems/systems-management/systems-management-documents){target="_blank"} published in 2023. The service volumes are split up into roadway classification and give specific input for rural areas.

Source: [FDOT District Two, Jacksonville Urban Office](https://fdot-d2-los.hdrgateway.com/){target="_blank"}

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/MajorRoads_LOS.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)
geojson_data <- geojson_data[!is.na(geojson_data$LOS_Peak_H), ]
geojson_data <- geojson_data[geojson_data$LOS_Peak_H != "-", ]
geojson_data <- geojson_data[order(geojson_data$LOS_Peak_H), ]

geojson_data$LOS_Peak_H <- factor(geojson_data$LOS_Peak_H, levels = unique(geojson_data$LOS_Peak_H))


# Create a custom color
pal <- colorFactor(palette = c('darkgreen','forestgreen',"orange", 'red','darkred'), 
                   domain = c("B", "C", "D","E","F"))

# Apply the custom color function to your data
geojson_data$colors <- sapply(geojson_data$LOS_Peak_H, pal)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~colors,popup = ~paste(LOS_Peak_H), opacity = 0.8)%>%
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  ) %>% 
  addLegend("topright", 
            colors = pal(unique(geojson_data$LOS_Peak_H)), 
            labels = unique(geojson_data$LOS_Peak_H),
            opacity = 1.0,
            title = "LOS Peak Hour 2022")
```

## Average Vehicle Delay

Vehicle delay is typically reported annually in vehicle-hours per day and is calculated by the sum of the daily delay. The FDOT sourcebook shows data provided from HERE technologies and can be summarized for the region, by county, and by functional classification of the roadway. For all highway systems in the North Florida TPO region, the daily vehicle hours of delay increased from 2020 to 2022, but is still below pre-pandemic levels. 

::: {layout="[ [1,1] ]"}

```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

df_vhd <- read.csv("~/GitHub/amr_2024/data/vehicle_delay.csv")
# Create a Highchart object with data labels and stack totals
hchart(df_vhd, "column", hcaes(x = year, y = SHS_year, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Vehicle Hours of Delay"),
    min = 0, 
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(1) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }
    }")
    )
  ) %>%
  hc_title(text = "State Highway System Vehicle Hours of Delay by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://fdotsourcebook.com/performance-measures/auto/delay#" target="_blank"><b>FDOT Sourcebook Vehicle Hours of Delay</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button

```

```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

# Create a Highchart object with data labels and stack totals
hchart(df_vhd, "column", hcaes(x = year, y = NHS_year, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1e6, 1) + 'M';}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',
      formatter = JS(paste0("function() {
      return Highcharts.numberFormat(this.total / 1e6, 1) + 'M';
    }"))
    ),
    title = list(text = "Vehicle Hours of Delay"),
    min = 0, 
    max = 20000000,
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return num.toFixed(1) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "National Highway System Vehicle Hours of Delay by County and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://fdotsourcebook.com/performance-measures/auto/delay#" target="_blank"><b>FDOT Sourcebook Vehicle Hours of Delay</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button

```
:::

## Travel Speeds

The FDOT provides average peak hour travel speed by roadway segment for the state highway system. This data can be summarized for the region, by county, and by roadway functional classification. The average speed is reported annually in miles per hour and is calculated by averaging the average peak hour travel speed. Average speeds increased from 2020 to 2021 as a result of lower demand (vehicle miles traveled). 

The average travel speed should maintain or increase from year to year. The following table shows the trends for each county. The year and speed value is shown on hover.

Source: [NPMRDS RITIS Data](https://npmrds.ritis.org/analytics/){target="_blank"}

```{r}
df_travel_speeds <- read.csv("~/GitHub/amr_2024/data/travel_speeds2.csv")
colnames(df_travel_speeds) <- c("County", "Travel Speeds by Year")

colDefs <- list(list(className = 'dt-center',
                     targets = c(1:2), 
                     render = JS("function(data, type, full){ return '<span class=spark>' + data + '</span>' }")))

line_string <- "type: 'line',width: 250, height: 30, lineWidth: 2, highlightColor: 'orange', tooltipFormat: '{{offset:levels}} : {{y}} MPH', tooltipValueLookups: { levels: { '0': '2016', '1': '2017', '2': '2018', '3': '2019', '4': '2020', '5': '2021' }}"  

sl_line <- JS(sprintf("function (oSettings, json) { $('.spark:not(:has(canvas))').sparkline('html', {%s})}", line_string)) 

spark_table <- datatable(data.table(df_travel_speeds), 
  rownames = FALSE, 
  options = list(columnDefs = colDefs, 
  fnDrawCallback = sl_line,
  lengthChange = FALSE,
  deferRender = TRUE,
  searching = FALSE,
  scroller = TRUE,
  paginate=FALSE))

spark_table$dependencies <- append(spark_table$dependencies, htmlwidgets:::getDependency("sparkline"))

spark_table 

```

## Incident Clearance Times

The Florida Department of Transportation, law enforcement, emergency personnel and the local coroner’s office can be engaged in incidents. During some incidents, the time to open the road to traffic and restore or clear the road to normal traffic conditions can be impacted by the conditions of the crash that are
beyond FDOT’s or law enforcement’s control. For example:

* Emergency response personnel to respond and treat injured
persons.
* Specialized response teams must remove hazardous materials
before the road can be opened to traffic.
* The local coroner must investigate the scene if a fatality occurs. The time to open the road to traffic is typically one hour when a fatality occurs.
* The Florida Department of Transportation and law enforcement agencies work to open the road to traffic and restore the traffic operations as soon

The goals is to maintain or reduce the time to open roads tonormal traffic following an event.

::: {layout="[ [1,1] ]"}

```{r}
df_inc_all <- read.csv("~/GitHub/amr_2024/data/incident_clearance_all.csv")

# Define your custom colors
custom_colors <- c("#DEF9C4","#9CDBA6","#50B498","#468585")

# Create a Highchart object with data labels and stack totals
hchart(df_inc_all, "bar", hcaes(x = FY23_Qtr, y = Mins, group = Category)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(bar = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1, 1) ;}")
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray'
      ),
      title = list(text = "Minutes"),
      min = 0
    )) %>%
  hc_title(text = "2023 Incident Clearance Duration") %>%
  hc_subtitle(text = 'Source: <a href="https://sunguide.info/" target="_blank"><b>FDOT SunGuide</b></a>') %>%
  hc_xAxis(title = list(text = "Quarter")) %>%
  hc_yAxis(title = list(text = "Duration (Mins)")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y} Mins</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

```{r}
# Load data
df_duration <- read.csv("~/GitHub/amr_2024/data/road_duration_all.csv")

df_duration <- df_duration %>%
  filter(Category == "Roadway Clearance Duration")

# Define your custom colors
custom_colors <- c("#DEF9C4","#9CDBA6","#50B498","#468585")

# Create a Highchart object with data labels and stack totals
hchart(df_duration, "column", hcaes(x = Category, y = Mins, group = FY23_Qtr)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    #stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y / 1, 1) ;}")
    ) # Enable data labels
  )) %>%
  hc_yAxis(
    title = list(text = "Minutes"),
    min = 0
  ) %>%
  hc_title(text = "2023 Open Roads and Roadway Clearance Durations by Quarter") %>%
  hc_subtitle(text = 'Source: <a href="https://sunguide.info/" target="_blank"><b>FDOT SunGuide</b></a>') %>%
  hc_yAxis(title = list(text = "Duration (Mins)")) %>%
  hc_xAxis(title = list(text = "Duration Type")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y} Mins</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

:::

## Incident Event Types

Only 30% of the congestion in our region is caused by recurring delays. Other sources of delays include holiday peaks, incidents, weather, excess delay at signals, weather, and work zones. Transportation Systems Management and Operations (TSM&O) strategies are need to reduce delays caused by non-recurrent factors. 

The number of lane closures or other events, such as abandoned vehicles, debris in the roadway, road work, or crashes, increased in 2022.

There is no target for the number of events that occur.

```{r}
df_events <- read.csv("~/GitHub/amr_2024/data/event_types_all.csv")

hchart(df_events, "pie", hcaes(x = Event, y = Total)) %>%
  
  hc_title(text = "2023 Incident Event Totals", align = 'left', style = list(fontFamily = 'Roboto Condensed', color = '#333333', fill = '#333333', fontSize = '18px', fontWeight = 'bold')) %>%
  hc_subtitle(text = 'Source: <a href="https://sunguide.info/" target="_blank"><b>FDOT SunGuide</b></a>', align = 'left', style = list(fontFamily = 'Roboto Condensed')) %>%
  
  hc_tooltip(pointFormat = '{point.name}: <b>{point.y}</b>') %>%
  hc_plotOptions(
    pie = list(
      allowPointSelect = TRUE,
      cursor = 'pointer',
      dataLabels = list(
        enabled = TRUE, format = '{point.name} {point.percentage:.0f}%'
      ),
      dataLabels = list(
        list(enabled = TRUE, format = '{point.name}'),
        list(enabled = TRUE, format = '{point.percentage:.0f}%', style = list(fontSize = '0.9em'))
      ),
      showInLegend = TRUE
    )
  )

```

# Access and Sustainability

## Transit Accessibility

Access to transit is a significant need in underserved communities and a focus for the transit agencies within the region. On a regional basis the availability of populations to transit is low. However, in the urban core of Jacksonville nearly 89% of the populations is within 1/4 mile of a transit stop.  

The target is to provide transit access within 1/4 mile of a bus stop to 95% of the population.

Source: [JTA Park n' Ride Locations](https://www.jtafla.com/ride-jta/how-to-ride/park-n-ride/){target="_blank"}

```{r, message=FALSE}

df_pnr <- read.csv("~/GitHub/amr_2024/data/ParkNRide.csv")
point_data <- data.frame(
  name = df_pnr$Location_Name,
  lat = df_pnr$Latitude,
  lon = df_pnr$Longitude
)

# Continuous palette
pal <- colorFactor(palette = "viridis", domain = df_pnr$Location_Name)
labs <- as.list(df_pnr$Location_Name)

# Create the Leaflet map
leaflet(data = df_pnr) %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  addCircles(~Longitude, ~Latitude, radius = 5800,
             color = "white",  opacity = 0.25,
             fillColor = "#0078FF", fillOpacity = 0.25) %>%  # Add the default OpenStreetMap tiles
  addCircleMarkers(~Longitude, ~Latitude, # Use the Longitude and Latitude columns
                   popup = ~paste(Location_Name), # Replace 'name' with the column name you want to display in the popup
                   radius = 5, label = labs, color = ~pal(Location_Name), weight = 1, 
                   fillOpacity = 0.8) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9) %>%
  addLegend(df_pnr,
            position = "bottomright",
            pal = pal, values = ~Location_Name,
            title = "Location",
            opacity = 1) %>% 
  addEasyButton(
    easyButton(
      icon = "fa-map-marker",
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )

```

## Transit Routes

The Northeast Florida Region has multiple public transportation options to move between counties. The routes in the map below are sorted by transportation service provider. This map is not exhaustive of all available routes, but includes routes where data is publicly available as of 2023.

Source: [Florida Transit Data Exchange](https://ftis.org/Posts.aspx){target="_blank"}

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/TransitAll_Routes.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color
pal <- colorFactor(palette = "viridis", domain = geojson_data$Admin)
labs <- as.list(geojson_data$Admin)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.855651, lat = 30.132184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~pal(Admin), popup = ~paste(Admin), opacity = 0.8, label = labs)%>%
  addLegend("bottomleft", 
            colors = pal(unique(geojson_data$Admin)), 
            labels = unique(geojson_data$Admin),
            opacity = 1.0,
            title = "Agency") %>% 
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.132184, -81.855651], 9); }")
    )
  )
```

## Bicycle and Pedestrian Level of Traffic Stress

The quality of service determines how satisfied travelers are with a particular facility or service. Factors that affect the comfort of pedestrians and bicyclists range from pavement condition, heavy vehicle presence, facilities at intersections, etc. The [FDOT Multimodal Quality/Level of Service Handbook](https://www.fdot.gov/planning/systems/systems-management/systems-management-documents){target="_blank"} published in 2023 shows a flow chart for both pedestrian and bicycle level of traffic stresses.

Source: [FDOT LOS Ped/Bike](https://fdot-d2-los-pedbike.hdrgateway.com){target="_blank"}

::: {layout="[ [1,1] ]"}

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/LTS_Bike_Ped.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326) %>%
  drop_na(Bike_LTS)

# Create a custom color generating function
generateColor <- function(value) {
  ifelse(value == '1', 'darkgreen',
         ifelse(value == '2', 'yellow',
                ifelse(value == '3', 'orange',
                       ifelse(value == '4', 'red', 'gray'))))
}

# Apply the custom color function to your data
geojson_data$colors <- sapply(geojson_data$Bike_LTS, generateColor)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~colors,popup = ~paste(Bike_LTS), opacity = 0.8)%>%
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  ) %>%
  addLegend(
    position = "topright",
    colors = c('darkgreen', 'yellow', 'orange', 'red'),
    labels = c('1', '2', '3', '4'),
    title = "Bicycle Level of<br>Traffic Stress"
  )
```


```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/LTS_Bike_Ped.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)
geojson_data <- geojson_data %>% mutate(Ped_LTS = replace(Ped_LTS, Ped_LTS == " ", '4'))

# Create a custom color generating function
generateColor <- function(value) {
  ifelse(value == '1', 'darkgreen',
         ifelse(value == '2', 'yellow',
                ifelse(value == '3', 'orange',
                       ifelse(value == '4', 'red', 'gray'))))
}

# Apply the custom color function to your data
geojson_data$colors <- sapply(geojson_data$Ped_LTS, generateColor)

leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~colors,popup = ~paste(Ped_LTS), opacity = 0.8)%>%
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  ) %>%
  addLegend(
    position = "topright",
    colors = c('darkgreen', 'yellow', 'orange', 'red'),
    labels = c('1', '2', '3', '4'),
    title = "Pedestrian Level of<br>Traffic Stress"
  )
```

:::

## Impacts of Investments on the Natural Environment

Florida’s Efficient Transportation Decision Making (ETDM) process is a procedure used to look into transportation projects and consider their environmental impacts. The stakeholders involved are usually the MPOs in the surrounding area. The ETDM manual can be found on the [FDOT webpage.](https://www.fdot.gov/environment/pubs/etdm/etdmmanual.shtm){target="_blank"}

Source: [Environmental Screening Tool](https://etdmpub.fla-etat.org/est/#){target="_blank"} and 
[FDOT 5 Year Work Program Meta Data](https://fgdl.org/meta/FDOT_WP_2023.xml){target="_blank"}

```{r}
# knitr::include_graphics("~/GitHub/amr_2024/data/ETDM.png")

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/fdot_wp.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color generating function
# Continuous palette
pal <- colorFactor(palette = "Set1", domain = geojson_data$DESCRIPT)
labs <- as.list(geojson_data$DESCRIPT)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -82.055651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~pal(DESCRIPT), popup = ~paste(DESCRIPT), opacity = 0.8, label = labs)%>%
  addLegend("bottomleft", 
            colors = pal(unique(geojson_data$DESCRIPT)), 
            labels = unique(geojson_data$DESCRIPT),
            opacity = 1.0,
            title = "Description") %>% 
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -82.055651], 9); }")
    )
  )
```

## Emissions

Common air pollutants from transportation modes that negatively affect humans are sulfur oxides, nitrogen oxides, and fine particulate matter. The FDOT is working on alternative vehicle types to help reduce the amount of emissions present. Travel delay reduction can also help alleviate emissions. The cost of emissions is related to the amount of congestion, as congestion increases vehicle delay. 

The U.S. Department of Transportation (USDOT) lists the damage costs for emissions per metric ton within the Benefit-Cost Analysis Guidance for Discretionary Grant Programs. To calculate the total damage costs of these emissions, the emission factor per vehicle miles traveled was taken from the United States Environmental Protection Agency, and this number was applied to the total vehicle miles traveled within the North Florida TPO region. The amount of emissions per mile is estimated to be: 

$$ 3.91 × 10^{-4}\hspace{5 mm} \frac{metric\hspace{1 mm}tons\hspace{1 mm}of\hspace{1 mm}CO2}{mile}$$

The emissions factors displayed in this report also account for electric vehicles. Emmissions costs are expected to rise year-over-year. 

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    editable = TRUE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate = FALSE
    ,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}

df_c02 <- read.csv("~/GitHub/amr_2024/data/C02DamageCosts.csv", check.names=FALSE, row.names=1) 
datatable(
  caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://www.epa.gov/energy/greenhouse-gases-equivalencies-calculator-calculations-and-references" target="_blank"><b>US EPA</b></a> and <a href="https://www.transportation.gov/sites/dot.gov/files/2023-12/Benefit%20Cost%20Analysis%20Guidance%202024%20Update.pdf"><b>US DOT</b></a>')),
  df_c02,options = c(table_options(), list(pageLength = 4)))
```

## Trail Connectivity

The North Florida TPO published the Northeast Florida Regional Multi-Use Trail Master Plan in 2019 which addresses the regional trail network and how funding could be applied to projects to expand the multi-use paths within the region. Funding opportunities such as Shared Use Network (SUN) Trail Funding were considered. Existing trails within the region total approximately 121 miles. A trail network of approximately 570 miles is proposed. Maps were taken from the Multi-Use Trail Master Plan. The map below shoes the existing and proposed trails identified within the North Florida TPO network. 

Source: [NFTPO Regional Multi-use Trail Master Plan](https://northfloridatpo.com/uploads/Studies/2018-19-Regional-Multi-use-Trail-Master-Plan-Final21.pdf){target="_blank"}

```{r}

# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/nftpo_trails.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color generating function
custom_palette <- c("#FF33A1", "#2ea338")

# Continuous palette
pal <- colorFactor(palette = custom_palette, domain = geojson_data$Scale)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~pal(Scale), popup = ~paste(Scale), opacity = 1.0)%>%
  addLegend("topright", 
            colors = pal(unique(geojson_data$Scale)), 
            labels = unique(geojson_data$Scale),
            opacity = 1.0,
            title = "Scale") %>% 
  addEasyButton(
    easyButton(
      icon = 'fa-map-marker',
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )
```

## Pedestrian Connectivity

The FDOT aims to provide 100% coverage of the state highway system for bicycles and pedestrians where appropriate. Based on the FDOT roadway characteristics inventory, the average pedestrian facility coverage over the four counties within the North Florida TPO area is 65.62% for 2022. Year over year, the total pedestrian coverage within the North Florida TPO region generally increases, resulting in increased sidewalk mileage.  

A map of the FDOT sidewalks and gaps in the region is provided below. 

Source: [FDOT Sidewalks and Gaps TDA](https://gis-fdot.opendata.arcgis.com/datasets/4c970deb696d451283e8e4b7f4464667_0/explore?location=30.304647%2C-81.573657%2C9.76){target="_blank"}

```{r, message=FALSE}
# Load your GeoJSON file
geojson_data <- st_read("~/GitHub/amr_2024/data/Sidewalks_and_Gaps_NF.geojson", quiet = TRUE)  %>% 
  st_transform(crs = 4326)

# Create a custom color
pal <- colorFactor(palette = c("darkgreen","red", "gold", "gold"), 
                   domain = c("Gap", "Left", "Right","Composite"))

labs <- as.list(geojson_data$RDWYSIDE_LNG)

# Create the Leaflet map
leaflet() %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9)%>%
  addPolylines(data = geojson_data, color = ~pal(RDWYSIDE_LNG),popup = ~paste(RDWYSIDE_LNG), opacity = 0.8,label = labs)%>%
  addLegend("bottomright", 
            colors = pal(unique(geojson_data$RDWYSIDE_LNG)), 
            labels = unique(geojson_data$RDWYSIDE_LNG),
            opacity = 1.0,
            title = "Roadway Side") %>% 
  addEasyButton(
    easyButton(
      icon = "fa-map-marker",
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )

```

# Preservation and Maintanence

## Pavement Condition on Primary Freight Corridors

Pavement condition within the study area is evaluated by the FDOT. The areas reviewed include major roads such as interstates and highways with U.S. or state road numbers. FDOT standard for acceptable pavement is set at the 80% mark on the SHS. According to data from the FDOT state materials office, a pavement condition survey program showed that for 2023, District 2 had 72.7% of SHS pavement meeting FDOT standards. The North Florida TPO area has data from as recent as 2022. For 2022, the percentage of interstate pavement in poor condition was 0.2% which is an improvement of 0.1% from the previous year. The percentage of non-interstate NHS pavement in poor condition was 1.6% which was about the same as the previous year. 

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    editable = TRUE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate = FALSE
    ,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}

df_pfc <- read.csv("~/GitHub/amr_2024/data/PrimaryFreightCorridorsPoorPavement.csv", check.names=FALSE, row.names=1) 
datatable( caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>')),
    df_pfc,options = c(table_options(), list(pageLength = 6)))
```

## Yearly Pavement Conditions

```{r}
table_options <- function() {
  list(
    rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    editable = TRUE,
    scroller = TRUE,
    lengthChange = FALSE, 
    paginate = FALSE
    ,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_pavement <- read.csv("~/GitHub/amr_2024/data/preserveandmaintain.csv", check.names=FALSE, row.names=1) 
datatable(caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>')),
    df_pavement,options = c(table_options(), list(pageLength = 8)))
```

## Bridge Conditions

This section deals with preserving and maintaining bridge and pavement conditions in the region. Pavement condition is summarized for Interstate and non-Interstate facilities that are on the National Highway System (NHS). The % is based on the lane-miles of facilities. Bridges are summarized by NHS and non-NHS facilities. The percent is calculated based on the bridge deck area. Goals are set by FDOT for how much of each category is in good condition and how much is in poor condition. Table 10 summarizes the pavement conditions. 

```{r}
table_options <- function() {
  list(
    rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_lottr <- read.csv("~/GitHub/amr_2024/data/bridgeconditions.csv", check.names=FALSE, row.names=1) 
datatable(caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/bridge" target="_blank"><b>FDOT Source Book, PM2-Bridge</b></a>')),
    df_lottr,options = c(table_options(), list(pageLength = 6)))
```

## Transit Vehicles

Maintaining transit vehicles and systems in a state of good repair is one of the highest priorities for any transit system to ensure safe, dependable and accessible services are provided.

The average age of vehicles operated by the Jacksonville Transportation Authority and Nassau Council on aging increased from 2019 with limited fleet replacement (0.3-year average increase) for each. The Sunshine Bus Company replaced a vehicle and their average age decreased.

The Jacksonville Transportation Authority assumed the operations of Clay Transit in 2018 and those vehicles are shown as part of the Jacksonville Transportation Authority’s fleet beginning in 2018.

The service life for transit vehicles varies by type and is not analyzed as part of this report. Most buses have a service life of 12 years or 250,000 miles. Smaller buses, such as shuttles, have a service life of four to seven years and between 50,000 and 175,000 miles. The people mover vehicles on the Automated Skyway Express in downtown Jacksonville exceed their predicted service life. The vehicles are currently 21 years old. A Skyway Modernization Program is underway.

The Mayport Ferry vessel, the Jean Ribault, has been carrying vehicles and people for 24 years, but is in good state of repair. The Jacksonville Transportation Authority assumed operations of the ferry from the City of Jacksonville in 2016.

```{r}

# Filter data for PedFatal > 0
df_transit_age <- read.csv("~/GitHub/amr_2024/data/transit_age.csv")

# Define your custom colors
custom_colors <- c("#D6EFD1","#C0DFCA","#80AF81","#508D4E","#1A5319")

# Create a Highchart object with data labels and stack totals
hchart(df_transit_age, "column", hcaes(x = Agency, y = Age, group = Year)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    #stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS("function() {
  return Highcharts.numberFormat(this.y/1,1);}")
    ) # Enable data labels
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')
    ),
    title = list(text = "Age (Years)"),
    min = 0
  ) %>%
  hc_title(text = "Average Transit Vehicle Age by Agency and Year") %>%
  hc_subtitle(text = 'Source: <a href="https://www.transit.dot.gov/ntd/ntd-data?field_data_categories_target_id%5B2516%5D=2516&field_product_type_target_id=All&year=all&combine&page=0" target="_blank"><b>Federal Transit Administration</b></a>') %>%
  hc_xAxis(title = list(text = "Agency")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

# Economic Impacts

## Cost of Congestion

The social costs of congestion include direct costs borne by the traveler in fuel consumption, lost travel time, additional vehicle depreciation and maintenance costs. The external costs included, or those not paid directly by the traveler, are from emissions which result in additional health care costs caused from increase cancer rates, loss of earnings associated with them and the associated negative health impacts. The costs of climate change associated with greenhouse gas emissions from carbon dioxide and oxides of nitrogen are also included. Emissions account for <1% of the social costs of congestion.

The social cost of congested increased about 11% in 2022 compared to 2021 and has risen above pre-pandemic levels. 

There is no target for the social cost of congestion but the costs should maintain or decline each year.

```{r}
df_cost_con <- read.csv("~/GitHub/amr_2024/data/cost_congestion.csv")

custom_colors <- c("#3ABEF9")

# Create a Highchart object with data labels and stack totals
hchart(df_cost_con, "column", hcaes(x = year, y = dollars)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    dataLabels = list(
      enabled = TRUE,
      
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 2) {
          return '$' + num.toFixed(2) + unit;
        }
        return '$' + num.toFixed(0) + unit;
      }"))
      
  #     formatter = JS("function() {
  # return '$'+Highcharts.numberFormat(this.y / 1e6, 1) + ' Mil';}")
  
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = FALSE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')),
    title = list(text = "Cost (Dollars)"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 2){
        return '$' + num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return '$' + num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Cost of Congestion by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://static.tti.tamu.edu/tti.tamu.edu/documents/mobility-report-2023.pdf" target="_blank"><b>Texas A&M Transportation Institute</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

## Cost of Crashes

The costs of fatalities, injuries and other crashes burdens the economy in the billions of dollars annually. Lost wages, pain and suffering, medical expenses and property loss are a few of the external costs resulting from crashes.  

The cost of fatal crashes in the region cost $2.81 Billion in 2023 which is an increase over 2022 but less than the totals for 2020 and 2021. The cost of serious injury crashes has decreased since 2021.

The target is to have zero injuries or fatalities resulting from crashes. 

::: {layout="[ [1,1] ]"}
```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

df_cost_fatal <- read.csv("~/GitHub/amr_2024/data/cost_fatal.csv")

# Create a Highchart object with data labels and stack totals
hchart(df_cost_fatal, "column", hcaes(x = year, y = cost, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 3) {
          return '$' + num.toFixed(2) + unit;
        }
        return '$' + num.toFixed(0) + unit;
      }"))
      
  #     formatter = JS("function() {
  # return '$' + Highcharts.numberFormat(this.y / 1e9, 1) + ' Bil';}")
  
  
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      #style = list(fontWeight = 'bold', color = 'gray',

      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return '$' + num.toFixed(2) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return '$' + num.toFixed(0) + unit;
        }
      }"))
    ),
    title = list(text = "Cost (Dollars)"),
    min = 0, 
    
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order == 3){
        return '$' + num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return '$' + num.toFixed(0) + unit;
      }

    }")
    )
    
  ) %>%
  hc_title(text = "Cost of Fatal Crashes by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://signal4analytics.com/" target="_blank"><b>Signal Four Analytics</b></a> and <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/roadway/fdm/2024/2024fdm122varexcept.pdf?sfvrsn=23e25c46_1" target="_blank"><b>FDOT Design Manual</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

```{r}
# Define your custom colors
custom_colors <- c("#A7E6FF","#3ABEF9","#3572EF","#050C9C")

df_cost_injury <- read.csv("~/GitHub/amr_2024/data/cost_serious_injury.csv")

# Create a Highchart object with data labels and stack totals
hchart(df_cost_injury, "column", hcaes(x = year, y = cost, group = county)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    stacking = "normal",
    dataLabels = list(
      enabled = TRUE,
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 3) {
          return '$' + num.toFixed(2) + unit;
        }
        return '$' + num.toFixed(0) + unit;
      }"))
    )
  )) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = TRUE, # Enable stack totals
      formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.total) / Math.log(1000));
        var unit = units[order];
        var num = this.total / Math.pow(1000, order);
        if (order >= 2) {
          return '$' + num.toFixed(0) + unit;
        }
        else if (order == 0){
          return this.total;
        }
        else {
          return '$' + num.toFixed(0) + unit;
        }
      }"))
    ),
    title = list(text = "Cost (Dollars)"),
    min = 0, 
    max = 3500000000,
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order == 3){
        return '$' + num.toFixed(2) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return '$' + num.toFixed(0) + unit;
      }
    }")
    )
    
  ) %>%
  hc_title(text = "Cost of Serious Injury Crashes by Year") %>%
  hc_subtitle(text = 'Source: <a href="https://signal4analytics.com/" target="_blank"><b>Signal Four Analytics</b></a> and <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/roadway/fdm/2024/2024fdm122varexcept.pdf?sfvrsn=23e25c46_1" target="_blank"><b>FDOT Design Manual</b></a>') %>%
  hc_xAxis(title = list(text = "Year")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```
:::

## Return on Investment

***Highways***

Based on a study of the macroeconomic impacts of the Florida Department of Transportation’s Annual Work every dollar invested in transportation returns a $4 economic return. The Florida Department of Transportation will invest $1.4 billion in Clay, Duval, Nassau and St. Johns counties in the 2022-2023 Work Program resulting in an economic benefit of $5.8 billion. The 2022-2023 fiscal year work program is the largest investment in history.

***Multimodal***

North Florida’s ports generate 138,500 jobs in Florida and supports nearly $31.1 billion in annual economic output for the region and state. Jacksonville Aviation Authority’s four-airport system contributes more than $6 billion annually to the local economy. The Jacksonville Transportation Authority’s operations generated more than $73.6 million in labor compensation, saved customers more than $23.4 million in transportation costs, and spurred $118.6 million in total added value. The total benefit for transportation investment is $40.4 billion for North Florida.

There are no benchmarks for the economic benefit, but the larger the benefit the better.

```{r}
df_roi <- read.csv("~/GitHub/amr_2024/data/roi.csv")

custom_colors <- c("#3ABEF9")

# Create a Highchart object with data labels and stack totals
hchart(df_roi, "column", hcaes(x = Mode, y = Benefit)) %>%
  hc_colors(custom_colors) %>%
  hc_plotOptions(column = list(
    dataLabels = list(
      enabled = TRUE,
       formatter = JS(paste0("function() {
        var units = ['', 'K', 'M', 'B'];
        var order = Math.floor(Math.log(this.y) / Math.log(1000));
        var unit = units[order];
        var num = this.y / Math.pow(1000, order);
        if (order >= 3) {
          return '$' + num.toFixed(1) + unit;
        }
        return '$' + num.toFixed(0) + unit;
      }"))
    ))) %>%
  hc_yAxis(
    stackLabels = list(
      enabled = FALSE, # Enable stack totals
      style = list(fontWeight = 'bold', color = 'gray')),
    title = list(text = "Cost (Dollars)"),
    min = 0, 
    labels = list(
      formatter = JS("function() {
      var units = ['', 'K', 'M', 'B'];
      var order = Math.floor(Math.log(this.value) / Math.log(1000));
      var unit = units[order];
      var num = this.value / Math.pow(1000, order);
      if (order >= 3){
        return '$' + num.toFixed(1) + unit;
      }
      else if (this.value == 0){
        return this.value;
      }
      else{
        return '$' + num.toFixed(0) + unit;
      }
    }")
    )
  ) %>%
  hc_title(text = "Benefit in Dollars by Mode") %>%
  hc_subtitle(text = 'Source: <a href="http://edr.state.fl.us/content/returnoninvestment/ROI_Transportation.pdf" target="_blank"><b>Florida Department of Transportation Office of Economic & Demographic Research</b></a>') %>%
  hc_xAxis(title = list(text = "Mode")) %>%
  hc_tooltip(shared = TRUE, pointFormat = "<span style='color:{series.color}'>{series.name}</span>: <b>{point.y}</b><br/>") %>%
  hc_legend(enabled = TRUE) %>%
  hc_add_theme(hc_theme_smpl()) %>%
  hc_chart(events = list(load = JS("function() { this.xAxis[0].setExtremes(); }"))) %>%
  hc_exporting(enabled = TRUE)  # Enable the exporting button
```

# MAP-21 Performance Measures

## PM1 Safety (All Public Roads)

The safety performance measures help to assess fatalities and serious injuries on all public roads regardless of ownership or functional classification. As required by 23 CFR 490, the North Florida TPO adopted targets for number of fatalities, number of serious injuries, fatality rate, serious injury rate and total number of non-motorized fatalities and serious injuries. These targets align with the Florida Department of Transportation’s adopted targets.

```{r}
table_options <- function() {
  list(
     rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_pm1 <- read.csv("~/GitHub/amr_2024/data/pm1_safety.csv", check.names=FALSE) 
df_pm1 <- df_pm1[-1,] # Removes row saying Target 
colnames(df_pm1) <- c('Year','Fatalities (total)','Fatalities per 100 million VMT','Serious Injuries','Serious Injuries per 100 million VMT','Non-motorized Fatalities and Serious Injuries') 
datatable(caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/planning/fto/pdis-documents/pm1-safety-fact-sheet-(feb23).pdf" target="_blank"><b>Florida Department of Transportation Forecasting and Trends Office</b></a>')),
    df_pm1,options = c(table_options(), list(pageLength = 6)))
```

## PM2 Bridge and Pavement

Pavement and bridge condition assessment is vital to the continued maintenance of the roadway system. As required by 23 USC 23 CFR 490, the Florida Department of Transportation has adopted initial targets for bridge and pavement conditions. The North Florida TPO adopted the FDOT guidance for performance management of pavement and bridges.

Source: [Florida Department of Transportation Forecasting and Trends Office](https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/planning/fto/pdis-documents/pm2-bridge-and-pavement-fact-sheet-(feb23).pdf?sfvrsn=fda6ddae_5/pm2-bridge-and-pavement-fact-sheet-(feb23).pdf){target="_blank"} and [Federal Highway Administration National Bridge Inventory](https://www.fhwa.dot.gov/bridge/nbi/ascii.cfm){target="_blank"}

::: {.panel-tabset .nav-pills}

### Bridge Condition Map
The map below shows the locations and conditions of the bridges within the North Florida TPO region. According to the FDOT roadway characteristics inventory, there are a total of 909 bridges in the region. 

```{r, message=FALSE}

df_bridge <- read.csv("~/GitHub/amr_2024/data/National_Bridge_NF.csv")
df_bridge <- df_bridge[df_bridge$DECK_CON != "N/A",]
point_data <- data.frame(
  name = df_bridge$DECK_CON,
  lat = df_bridge$LATDD,
  lon = df_bridge$LONGDD
)

# Continuous palette
ord <- factor(df_bridge$DECK_CON, levels = c('Good', 'Fair', 'Poor'))
pal <- colorFactor(palette = c("limegreen","darkgreen",'darkorange'), levels = ord, ordered = TRUE)
labs <- paste("<b>Deck Condition:</b> ", df_bridge$DECK_CON, "<br><b>Bridge Condition:</b>", df_bridge$BRIDGE_CON)

# Create the Leaflet map
leaflet(data = df_bridge) %>%
  addTiles() %>%  # Add default OpenStreetMap map tiles
  addProviderTiles(providers$CartoDB.Positron) %>%
  addCircleMarkers(~LONGDD, ~LATDD, # Use the Longitude and Latitude columns
                   popup = ~paste0("<b>Deck Condition: </b>", DECK_CON, "<br><b>Bridge Condition: </b>",BRIDGE_CON), 
                   radius=5,label = lapply(labs, htmltools::HTML), color = ~pal(DECK_CON), weight = 1, 
                   fillOpacity = 0.8) %>%
  setView(lng = -81.655651, lat = 30.232184, zoom = 9) %>% 
  addEasyButton(
    easyButton(
      icon = "fa-map-marker",
      title = "Zoom to Jacksonville",
      onClick = JS("function(btn, map){ map.setView([30.232184, -81.655651], 9); }")
    )
  )%>%
  addLegend(df_bridge,
            position = "bottomright",
            pal = pal, values = ord,
            title = "Bridge Deck Condition",
            opacity = 1) 

```

### NHS Bridge Decks

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_nhs <- read.csv("~/GitHub/amr_2024/data/nhs_bridges.csv", check.names=FALSE, row.names=1) 
colnames(df_nhs) <- c('Year','Good Condition','Poor Condition') 
datatable(df_nhs,options = c(table_options(), list(pageLength = 5)))
```

:::

::: {layout="[ [1,1] ]"}

### Interstate Pavement

```{r}
table_options <- function() {
  list(
     rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}

df_inter_pave <- read.csv("~/GitHub/amr_2024/data/inter_pavements.csv", check.names=FALSE, row.names=1) 
colnames(df_inter_pave) <- c('Year','Good Condition','Poor Condition') 
datatable(df_inter_pave,options = c(table_options(), list(pageLength = 5)), 
          caption = htmltools::tags$caption(
    style = 'caption-side: top; text-align: left;',
    htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>'))
    )
```

### Non-Interstate Pavement

```{r}
table_options <- function() {
  list(
     rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_noninter_pave <- read.csv("~/GitHub/amr_2024/data/noninter_pavements.csv", check.names=FALSE, row.names=1) 
colnames(df_noninter_pave) <- c('Year','Good Condition','Poor Condition') 
datatable(df_noninter_pave,options = c(table_options(), list(pageLength = 5)), 
          caption = htmltools::tags$caption(
            style = 'caption-side: top; text-align: left;',
            htmltools::HTML('Source: <a href="https://fdotsourcebook.com/federal-measures/pavement" target="_blank"><b>FDOT Source Book, PM2-Pavement</b></a>'))
          )
```

:::

### State Targets

```{r}
table_options <- function() {
  list(
     rowCallback = DT::JS(
      "function(row, data, index) {
        $('td:eq(0)', row).html(index + 1);
      }"
    ),
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}
df_targets <- read.csv("~/GitHub/amr_2024/data/state_targets.csv", check.names=FALSE, row.names=1) 
df_targets <- df_targets[-1,]
colnames(df_targets) <- c('Performance Measure','2023 Target','2025 Target') 
datatable(df_targets,options = c(table_options(), list(pageLength = 7)), 
          caption = htmltools::tags$caption(
            style = 'caption-side: top; text-align: left;',
            htmltools::HTML('Source: <a href="https://fdotwww.blob.core.windows.net/sitefinity/docs/default-source/planning/fto/pdis-documents/ho_summary-of-targets-in-fl_230714_v4.pdf" target="_blank"><b>FDOT Forecasting & Trends Office</b></a>'))
          )

```

## PM3 System Performance

These are measures to assess the performance of the National Highway System (NHS), freight movement on the Interstate System, and Congestion Mitigation and Air Quality Improvement Program. The North Florida TPO has adopted the Florida Department of Transportation performance targets. Reliability refers to a consistent predictable travel time.

```{r}
table_options <- function() {
  list(
    deferRender = TRUE,
    searching = FALSE,
    scroller = TRUE,
    lengthChange = FALSE,
    paginate=FALSE,
    initComplete = JS(
      "function(settings, json) {",
      "$(this.api().table().header()).css({'background-color': '#517fb9', 'color': '#fff'});",
      "}"
    )
  )
}

df_sysperf <- read.csv("~/GitHub/amr_2024/data/pm3_sysperf.csv", check.names=FALSE, row.names=1) 
colnames(df_sysperf) <- c('Performance Measure','% of Person Miles Traveled on the Interstate that are Reliable',
                          '% of Person Miles Traveled on the Non-Interstate NHS Reliable','Truck Travel Time Reliability (TTTR) Index') 
datatable(df_sysperf,
          caption = htmltools::tags$caption(
            style = 'caption-side: top; text-align: left;',
            htmltools::HTML('Source: <a href="https://performance-data-integration-space-fdot.hub.arcgis.com/pages/mpo-performance-resources" target="_blank"><b>Florida Department of Transportation Forecasting and Trends Office</b></a>')),
          options = c(table_options(), list(pageLength = 8)))

```
